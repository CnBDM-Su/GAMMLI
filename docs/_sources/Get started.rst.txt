Get started
=============

Installation
----------------

The following environments are required for LVXNN package:

- Python 3.7
- tensorflow 2.0.0
- networkx 2.4
- numpy 1.16.4
- pandas 0.23.4
- scikit-learn 0.21.2




demo
---------------------

You can get started with the file demo.ipynb, which is a demo for using LVXNN model:

https://github.com/CnBDM-Su/LV_XNN/blob/master/demo.ipynb

Data preprocessing
-----------------------------------

.. code-block::

    import pandas as pd
    import numpy as np
    from sklearn.model_selection import train_test_split
    from collections import OrderedDict
    import time
    from sklearn.metrics import mean_squared_error,roc_auc_score,mean_absolute_error,log_loss
    from lvxnn.LVXNN import LV_XNN
    from lvxnn.DataReader import data_initialize
    from lvxnn.utils import local_visualize
    from lvxnn.utils import global_visualize_density
    from lvxnn.utils import feature_importance_visualize
    from lvxnn.utils import plot_trajectory
    from lvxnn.utils import plot_regularization

    import tensorflow as tf
    tf.compat.v1.enable_eager_execution()
    random_state = 0
    data= pd.read_csv('demo_data/simulation_regression.csv')

    train , test = train_test_split(data,test_size=0.2 ,random_state=0)
    task_type = "Regression"

    meta_info = OrderedDict()

    meta_info['uf_1']={'type': 'continues','source':'user'}
    meta_info['uf_2']={'type': 'continues','source':'user'}
    meta_info['uf_3']={'type': 'continues','source':'user'}
    meta_info['uf_4']={'type': 'continues','source':'user'}
    meta_info['uf_5']={'type': 'continues','source':'user'}
    meta_info['if_1']={'type': 'continues','source':'item'}
    meta_info['if_2']={'type': 'continues','source':'item'}
    meta_info['if_3']={'type': 'continues','source':'item'}
    meta_info['if_4']={'type': 'continues','source':'item'}
    meta_info['if_5']={'type': 'continues','source':'item'}
    meta_info['user_id']={"type":"id",'source':'user'}
    meta_info['item_id']={"type":"id",'source':'item'}
    meta_info['target']={"type":"target",'source':''}
    tr_x, tr_Xi, tr_y, tr_idx, te_x, te_Xi, te_y, val_x, val_Xi, val_y, val_idx, meta_info, model_info,sy,sy_t = data_initialize(train,test,meta_info,task_type ,'warm', random_state, True)


Model training
-----------------------------------

.. code-block::

    model = LV_XNN(wc='warm',model_info=model_info, meta_info=meta_info, subnet_arch=[20, 10],interact_arch=[20, 10],activation_func=tf.tanh, batch_size=min(500, int(0.2*tr_x.shape[0])), lr_bp=0.001, auto_tune=False,
               interaction_epochs=300,main_effect_epochs=1000,tuning_epochs=100,loss_threshold_main=0.1,loss_threshold_inter=0.5,alpha=0,combine_range=0.85,
              verbose=True,val_ratio=0.125, early_stop_thres=100,interact_num=10,u_group_num=30,i_group_num=50,scale_ratio=0.94,n_power_iterations=5,n_oversamples=0,
              mf_training_iters=500,change_mode=True,convergence_threshold=0.001,max_rank=5,shrinkage_value=20,interaction_restrict=True)
    model.fit(tr_x, val_x, tr_y, val_y, tr_Xi, val_Xi, tr_idx, val_idx)


Training trajectory
-----------------------------------

.. code-block::

    simu_dir = 'result'
    data_dict_logs = model.final_gam_model.summary_logs(save_dict=False)
    data_dict_logs.update({"err_train_mf":model.final_mf_model.mf_mae,"err_val_mf":model.final_mf_model.mf_valmae})
    plot_trajectory(data_dict_logs, folder=simu_dir, name="s1_traj_plot", log_scale=True, save_png=False, save_eps=False)

.. image:: /demo_image/trajectory.png
    :width: 80%
    :align: center



Feature importance
-----------------------------------

.. code-block::

    data_dict = model.final_gam_model.global_explain(0,save_dict=False)
    feature_importance_visualize(data_dict, save_png=True, folder=simu_dir, name='s1_feature')

.. image:: /demo_image/feature_importance.png
    :width: 80%
    :align: center

Global explain
-----------------------------------

.. code-block::

    importance = model.get_all_rank(tr_Xi)
    model.dash_board(data_dict, importance,simu_dir,False)


.. image:: /demo_image/global.png
    :width: 80%
    :align: center

.. image:: /demo_image/latent.png
    :width: 80%
    :align: center

Local explain
-----------------------------------

.. code-block::

    data_dict_local = model.local_explain(0,10,tr_x,tr_Xi,tr_y)
    local_visualize(data_dict_local, save_png=False, folder=simu_dir, name='s1_local',task_type="Regression")


.. image:: /demo_image/local.png
    :width: 80%
    :align: center


Latent group explain
-----------------------------------

.. code-block::

    model.digraph('implicit',1000)


.. image:: /demo_image/relation.png
    :width: 100%
    :align: center
